class Solution {
public:
    bool vis[500][500];
    vector<pair<int, int>> d = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int n, m;

    bool valid(int i, int j) {
        if (i < 0 || i >= n || j < 0 || j >= m)
            return false;
        return true;
    }

    bool found;
    int cnt;
    void dfs(int si, int sj, vector<vector<int>>& grid) {

        vis[si][sj] = true;
        cnt++;
        for (int i = 0; i < 4; i++) {
            int ci = si + d[i].first;
            int cj = sj + d[i].second;

            if (valid(ci, cj) == false) // if path reach boundary, do not count land
                found = false;
            else if (valid(ci, cj) && !vis[ci][cj] && grid[ci][cj] == 1) {
                dfs(ci, cj, grid);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        memset(vis, false, sizeof(vis));
        n = grid.size();
        m = grid[0].size();
        int ans = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && !vis[i][j]) 
                {
                    found = true;
                    cnt = 0;
                    dfs(i, j, grid);
                    
                    if(!found) // after call
                    cnt = 0;
                    ans+= cnt;
                }
            }
        }
        return ans;
    }
};
